import pandas as pd
import json
from typing import Dict, List
from config import OPENAI_API_KEY
import logging
import openai

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def perform_swot_analysis(
    financial_ratios: List[Dict],
    qualitative_data: dict,
    search_results: dict
) -> dict:
    """
    Perform SWOT analysis based on financial ratios, qualitative data from filings, and internet search results.

    Parameters:
    - financial_ratios (pd.DataFrame): DataFrame containing calculated financial ratios.
    - qualitative_data (dict): Qualitative data extracted from filings.
    - search_results (dict): Information gathered from internet searches.

    Returns:
    - dict: A dictionary containing the SWOT analysis.
    """
    # Initialize OpenAI client
    openai.api_key = OPENAI_API_KEY
    client = openai.OpenAI(api_key=OPENAI_API_KEY)
    # Convert DataFrame to string for inclusion in the prompt
    financial_ratios_df = pd.DataFrame(financial_ratios)
    financial_ratios_str = financial_ratios_df.to_string()

    # Convert qualitative data and search results to JSON strings
    qualitative_data_str = json.dumps(qualitative_data, indent=2)
    search_results_str = json.dumps(search_results, indent=2)

    # Construct the prompt
    prompt = f"""
    As a financial analyst, perform a comprehensive SWOT analysis for the company based on the following data:

    Financial Ratios:
    {financial_ratios_str}

    Qualitative Data from Filings:
    {qualitative_data_str}

    Internet Search Results:
    {search_results_str}

    Provide the strengths, weaknesses, opportunities, and threats in a structured JSON format, using the following keys: "Strengths", "Weaknesses", "Opportunities", "Threats". Each key should have a list of bullet points. Do not include any introductory or concluding remarks.
    """

    # Call the language model
    try:
        logger.info("Generating SWOT analysis using the language model...")
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "You are a financial analyst."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=500,
            n=1
        )

        # Extract the response content
        swot_response_text = response.choices[0].message.content.strip()

        # Parse the response into a dictionary
        swot_analysis = parse_swot_response(swot_response_text)

        logger.info("SWOT analysis generated successfully.")
        return swot_analysis

    except Exception as e:
        logger.error(f"An error occurred while generating the SWOT analysis: {e}")
        return {}

def parse_swot_response(response_text: str) -> dict:
    """
    Parses the SWOT analysis text generated by the language model into a structured dictionary.

    Parameters:
    - response_text (str): The text response from the language model.

    Returns:
    - dict: A dictionary containing the SWOT analysis.
    """
    try:
        # Attempt to parse the response as JSON
        swot_analysis = json.loads(response_text)
        return swot_analysis
    except json.JSONDecodeError:
        # If JSON parsing fails, attempt to parse the text manually
        logger.warning("Failed to parse response as JSON. Attempting manual parsing.")

        swot_analysis = {'Strengths': [], 'Weaknesses': [], 'Opportunities': [], 'Threats': []}
        current_section = None

        lines = response_text.splitlines()
        for line in lines:
            line = line.strip()
            if line.lower().startswith('strengths'):
                current_section = 'Strengths'
            elif line.lower().startswith('weaknesses'):
                current_section = 'Weaknesses'
            elif line.lower().startswith('opportunities'):
                current_section = 'Opportunities'
            elif line.lower().startswith('threats'):
                current_section = 'Threats'
            elif line.startswith('-') or line.startswith('*'):
                if current_section:
                    # Remove bullet point characters and strip whitespace
                    point = line.lstrip('-*').strip()
                    swot_analysis[current_section].append(point)
        return swot_analysis
    except Exception as e:
        logger.error(f"An error occurred while parsing the SWOT analysis response: {e}")
        return {}
